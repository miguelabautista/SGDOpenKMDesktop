
package com.novatec.services.folderservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OKMFolder", targetNamespace = "http://ws.openkm.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OKMFolder {


    /**
     * 
     * @param token
     * @param fld
     * @return
     *     returns com.novatec.services.folderservice.Folder
     * @throws DatabaseException_Exception
     * @throws AutomationException_Exception
     * @throws RepositoryException_Exception
     * @throws ItemExistsException_Exception
     * @throws ExtensionException_Exception
     * @throws PathNotFoundException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "create", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.Create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.CreateResponse")
    public Folder create(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fld", targetNamespace = "")
        Folder fld)
        throws AccessDeniedException_Exception, AutomationException_Exception, DatabaseException_Exception, ExtensionException_Exception, ItemExistsException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @param dstPath
     * @throws DatabaseException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "move", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.Move")
    @ResponseWrapper(localName = "moveResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.MoveResponse")
    public void move(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath,
        @WebParam(name = "dstPath", targetNamespace = "")
        String dstPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ItemExistsException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     * @throws RepositoryException_Exception
     * @throws AccessDeniedException_Exception
     * @throws PathNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "delete", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.DeleteResponse")
    public void delete(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns boolean
     * @throws DatabaseException_Exception
     * @throws RepositoryException_Exception
     * @throws AccessDeniedException_Exception
     * @throws PathNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isValid", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.IsValid")
    @ResponseWrapper(localName = "isValidResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.IsValidResponse")
    public boolean isValid(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param uuid
     * @return
     *     returns java.lang.String
     * @throws DatabaseException_Exception
     * @throws RepositoryException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPath", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetPath")
    @ResponseWrapper(localName = "getPathResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetPathResponse")
    public String getPath(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "uuid", targetNamespace = "")
        String uuid)
        throws AccessDeniedException_Exception, DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns java.util.List<com.novatec.services.folderservice.Folder>
     * @throws DatabaseException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChildren", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetChildren")
    @ResponseWrapper(localName = "getChildrenResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetChildrenResponse")
    public List<Folder> getChildren(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns java.util.List<com.novatec.services.folderservice.Folder>
     * @throws DatabaseException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChilds", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetChilds")
    @ResponseWrapper(localName = "getChildsResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetChildsResponse")
    public List<Folder> getChilds(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns com.novatec.services.folderservice.Folder
     * @throws DatabaseException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProperties", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetProperties")
    @ResponseWrapper(localName = "getPropertiesResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.GetPropertiesResponse")
    public Folder getProperties(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @param newName
     * @return
     *     returns com.novatec.services.folderservice.Folder
     * @throws DatabaseException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "rename", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.Rename")
    @ResponseWrapper(localName = "renameResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.RenameResponse")
    public Folder rename(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath,
        @WebParam(name = "newName", targetNamespace = "")
        String newName)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ItemExistsException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns com.novatec.services.folderservice.Folder
     * @throws DatabaseException_Exception
     * @throws AutomationException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws ExtensionException_Exception
     * @throws AccessDeniedException_Exception
     * @throws PathNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimple", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.CreateSimple")
    @ResponseWrapper(localName = "createSimpleResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.folderservice.CreateSimpleResponse")
    public Folder createSimple(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws AccessDeniedException_Exception, AutomationException_Exception, DatabaseException_Exception, ExtensionException_Exception, ItemExistsException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

}

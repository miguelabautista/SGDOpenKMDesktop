
package com.novatec.services.documentservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OKMDocument", targetNamespace = "http://ws.openkm.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OKMDocument {


    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "checkout", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Checkout")
    @ResponseWrapper(localName = "checkoutResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CheckoutResponse")
    public void checkout(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param content
     * @param token
     * @param doc
     * @return
     *     returns com.novatec.services.documentservice.Document
     * @throws AutomationException_Exception
     * @throws AccessDeniedException_Exception
     * @throws UnsupportedMimeTypeException_Exception
     * @throws UserQuotaExceededException_Exception
     * @throws ExtensionException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws FileSizeExceededException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws IOException_Exception
     * @throws VirusDetectedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "create", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CreateResponse")
    public Document create(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "doc", targetNamespace = "")
        Document doc,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content)
        throws AccessDeniedException_Exception, AutomationException_Exception, DatabaseException_Exception, ExtensionException_Exception, FileSizeExceededException_Exception, IOException_Exception, ItemExistsException_Exception, PathNotFoundException_Exception, RepositoryException_Exception, UnsupportedMimeTypeException_Exception, UserQuotaExceededException_Exception, VirusDetectedException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws PrincipalAdapterException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "forceUnlock", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.ForceUnlock")
    @ResponseWrapper(localName = "forceUnlockResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.ForceUnlockResponse")
    public void forceUnlock(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, PrincipalAdapterException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param versionId
     * @param docPath
     * @return
     *     returns byte[]
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws IOException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContentByVersion", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetContentByVersion")
    @ResponseWrapper(localName = "getContentByVersionResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetContentByVersionResponse")
    public byte[] getContentByVersion(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "versionId", targetNamespace = "")
        String versionId)
        throws DatabaseException_Exception, IOException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws ExtensionException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "move", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Move")
    @ResponseWrapper(localName = "moveResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.MoveResponse")
    public void move(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ExtensionException_Exception, ItemExistsException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @return
     *     returns java.util.List<com.novatec.services.documentservice.Version>
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVersionHistory", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetVersionHistory")
    @ResponseWrapper(localName = "getVersionHistoryResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetVersionHistoryResponse")
    public List<Version> getVersionHistory(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param content
     * @param token
     * @param docPath
     * @param comment
     * @return
     *     returns com.novatec.services.documentservice.Version
     * @throws VersionException_Exception
     * @throws AccessDeniedException_Exception
     * @throws UserQuotaExceededException_Exception
     * @throws ExtensionException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws FileSizeExceededException_Exception
     * @throws DatabaseException_Exception
     * @throws IOException_Exception
     * @throws VirusDetectedException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkin", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Checkin")
    @ResponseWrapper(localName = "checkinResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CheckinResponse")
    public Version checkin(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "comment", targetNamespace = "")
        String comment)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ExtensionException_Exception, FileSizeExceededException_Exception, IOException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception, UserQuotaExceededException_Exception, VersionException_Exception, VirusDetectedException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws ExtensionException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "delete", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.DeleteResponse")
    public void delete(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ExtensionException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @return
     *     returns long
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVersionHistorySize", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetVersionHistorySize")
    @ResponseWrapper(localName = "getVersionHistorySizeResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetVersionHistorySizeResponse")
    public long getVersionHistorySize(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param doc
     * @throws VersionException_Exception
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setProperties", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.SetProperties")
    @ResponseWrapper(localName = "setPropertiesResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.SetPropertiesResponse")
    public void setProperties(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "doc", targetNamespace = "")
        Document doc)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception, VersionException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @return
     *     returns boolean
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isValid", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.IsValid")
    @ResponseWrapper(localName = "isValidResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.IsValidResponse")
    public boolean isValid(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param uuid
     * @return
     *     returns java.lang.String
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPath", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetPath")
    @ResponseWrapper(localName = "getPathResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetPathResponse")
    public String getPath(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "uuid", targetNamespace = "")
        String uuid)
        throws AccessDeniedException_Exception, DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @return
     *     returns com.novatec.services.documentservice.LockInfo
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "lock", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Lock")
    @ResponseWrapper(localName = "lockResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.LockResponse")
    public LockInfo lock(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns java.util.List<com.novatec.services.documentservice.Document>
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChildren", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetChildren")
    @ResponseWrapper(localName = "getChildrenResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetChildrenResponse")
    public List<Document> getChildren(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws ExtensionException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "purge", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Purge")
    @ResponseWrapper(localName = "purgeResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.PurgeResponse")
    public void purge(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ExtensionException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @param checkout
     * @return
     *     returns byte[]
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws IOException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContent", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetContent")
    @ResponseWrapper(localName = "getContentResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetContentResponse")
    public byte[] getContent(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "checkout", targetNamespace = "")
        boolean checkout)
        throws AccessDeniedException_Exception, DatabaseException_Exception, IOException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "unlock", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Unlock")
    @ResponseWrapper(localName = "unlockResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.UnlockResponse")
    public void unlock(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param versionId
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws ExtensionException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "restoreVersion", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.RestoreVersion")
    @ResponseWrapper(localName = "restoreVersionResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.RestoreVersionResponse")
    public void restoreVersion(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "versionId", targetNamespace = "")
        String versionId)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ExtensionException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws PrincipalAdapterException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "forceCancelCheckout", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.ForceCancelCheckout")
    @ResponseWrapper(localName = "forceCancelCheckoutResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.ForceCancelCheckoutResponse")
    public void forceCancelCheckout(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, PrincipalAdapterException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "cancelCheckout", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CancelCheckout")
    @ResponseWrapper(localName = "cancelCheckoutResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CancelCheckoutResponse")
    public void cancelCheckout(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param fldPath
     * @return
     *     returns java.util.List<com.novatec.services.documentservice.Document>
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChilds", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetChilds")
    @ResponseWrapper(localName = "getChildsResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetChildsResponse")
    public List<Document> getChilds(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "fldPath", targetNamespace = "")
        String fldPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @return
     *     returns com.novatec.services.documentservice.Document
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProperties", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetProperties")
    @ResponseWrapper(localName = "getPropertiesResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.GetPropertiesResponse")
    public Document getProperties(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @throws AccessDeniedException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "purgeVersionHistory", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.PurgeVersionHistory")
    @ResponseWrapper(localName = "purgeVersionHistoryResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.PurgeVersionHistoryResponse")
    public void purgeVersionHistory(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @param docPath
     * @param newName
     * @return
     *     returns com.novatec.services.documentservice.Document
     * @throws AccessDeniedException_Exception
     * @throws ExtensionException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "rename", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.Rename")
    @ResponseWrapper(localName = "renameResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.RenameResponse")
    public Document rename(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "newName", targetNamespace = "")
        String newName)
        throws AccessDeniedException_Exception, DatabaseException_Exception, ExtensionException_Exception, ItemExistsException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param content
     * @param token
     * @param docPath
     * @return
     *     returns com.novatec.services.documentservice.Document
     * @throws AutomationException_Exception
     * @throws AccessDeniedException_Exception
     * @throws UserQuotaExceededException_Exception
     * @throws ExtensionException_Exception
     * @throws UnsupportedMimeTypeException_Exception
     * @throws ItemExistsException_Exception
     * @throws RepositoryException_Exception
     * @throws FileSizeExceededException_Exception
     * @throws PathNotFoundException_Exception
     * @throws IOException_Exception
     * @throws DatabaseException_Exception
     * @throws VirusDetectedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSimple", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CreateSimple")
    @ResponseWrapper(localName = "createSimpleResponse", targetNamespace = "http://ws.openkm.com", className = "com.novatec.services.documentservice.CreateSimpleResponse")
    public Document createSimple(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "docPath", targetNamespace = "")
        String docPath,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content)
        throws AccessDeniedException_Exception, AutomationException_Exception, DatabaseException_Exception, ExtensionException_Exception, FileSizeExceededException_Exception, IOException_Exception, ItemExistsException_Exception, PathNotFoundException_Exception, RepositoryException_Exception, UnsupportedMimeTypeException_Exception, UserQuotaExceededException_Exception, VirusDetectedException_Exception
    ;

}
